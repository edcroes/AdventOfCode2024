namespace AoC.Common.Extensions;

public static class LongExtensions
{
    public static int GetNthDigit(this long value, int n) =>
        (int)(value / (long)Math.Pow(10, n) % 10);

    public static long SetNthDigit(this long value, int n, int to) =>
         value + (to - value.GetNthDigit(n)) * (long)Math.Pow(10, n);

    public static bool IsEven(this long value) =>
        value % 2 == 0;

    public static int GetDigitCount(this long value)
    {
        return value switch
        {
            >= 0 and < 10 => 1,
            >= 10 and < 100 => 2,
            >= 100 and < 1000 => 3,
            >= 1000 and < 10000 => 4,
            >= 10000 and < 100000 => 5,
            >= 100000 and < 1000000 => 6,
            >= 1000000 and < 10000000 => 7,
            >= 10000000 and < 100000000 => 8,
            >= 100000000 and < 1000000000 => 9,
            >= 1000000000 and < 10000000000 => 10,
            >= 10000000000 and < 100000000000 => 11,
            >= 100000000000 and < 1000000000000 => 12,
            >= 1000000000000 and < 10000000000000 => 13,
            >= 10000000000000 and < 100000000000000 => 14,
            >= 100000000000000 and < 1000000000000000 => 15,
            >= 1000000000000000 and < 10000000000000000 => 16,
            >= 10000000000000000 and < 100000000000000000 => 17,
            >= 100000000000000000 and < 1000000000000000000 => 18,
            >= 1000000000000000000 => 19,
            < 0 and > -10 => 1,
            <= -10 and > -100 => 2,
            <= -100 and > -1000 => 3,
            <= -1000 and > -10000 => 4,
            <= -10000 and > -100000 => 5,
            <= -100000 and > -1000000 => 6,
            <= -1000000 and > -10000000 => 7,
            <= -10000000 and > -100000000 => 8,
            <= -100000000 and > -1000000000 => 9,
            <= -1000000000 and > -10000000000 => 10,
            <= -10000000000 and > -100000000000 => 11,
            <= -100000000000 and > -1000000000000 => 12,
            <= -1000000000000 and > -10000000000000 => 13,
            <= -10000000000000 and > -100000000000000 => 14,
            <= -100000000000000 and > -1000000000000000 => 15,
            <= -1000000000000000 and > -10000000000000000 => 16,
            <= -10000000000000000 and > -100000000000000000 => 17,
            <= -100000000000000000 and > -1000000000000000000 => 18,
            <= -1000000000000000000 => 19
        };
    }

    public static long Join(this long value, long other) =>
        value * (long)Math.Pow(10, other.GetDigitCount()) + other;
}